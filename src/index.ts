import { readFileSync, writeFileSync } from 'node:fs'
import { dirname, join, relative } from 'node:path'
import { globSync } from 'fast-glob'
import type { Plugin } from 'vite'

const requireJson = (
  filename: string,
  defaultValue: AnyObject = {},
): AnyObject => {
  try {
    const content = readFileSync(filename, 'utf-8')
    const contentWithoutComments = content.replace(
      /\\"|"(?:\\"|[^"])*"|(\/\/.*|\/\*[\s\S]*?\*\/)/g,
      (m, g) => (g ? '' : m),
    )
    return JSON.parse(contentWithoutComments)
  } catch (error) {
    return defaultValue
  }
}

const pascalCase = (str: string) => {
  if (!str || typeof str !== 'string') return ''

  const words = str
    .replace(/[-_]/g, ' ')
    .replace(/([a-z])([A-Z])/g, '$1 $2')
    .replace(/\s+/g, ' ')
    .trim()
    .split(' ')

  const pascalCase = words
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join('')

  return pascalCase
}

const genRelativePath = (from: string, to: string) => {
  const relativePath = relative(from, to)
  return relativePath.startsWith('.') ? relativePath : `./${relativePath}`
}

export interface EasycomOptions {
  dts?: string
}

interface EasycomObject {
  name: string
  pattern: string
}

const pluginEasycom = (opts: EasycomOptions = {}): Plugin => {
  const resolvedOptions = {
    root: process.cwd(),
    dts: opts.dts || 'src/easycom.d.ts',
    easycom: [] as EasycomObject[],
  }

  const easycomMap = new Map<string, string>()

  const generateDts = () => {
    const filename = join(resolvedOptions.root, resolvedOptions.dts)
    const dtsDir = dirname(resolvedOptions.dts)

    const components: string[] = []
    for (const [name, url] of easycomMap.entries()) {
      const relativePath = genRelativePath(dtsDir, url)
      components.push(
        `    ${pascalCase(name)}: (typeof import('${relativePath}'))['default']`,
      )
    }

    const content = [
      '/* eslint-disable */',
      '/* prettier-ignore */',
      '// @ts-nocheck',
      '// noinspection JSUnusedGlobalSymbols',
      '// Generated by uniapp-easycom',
      '// biome-ignore lint: disable',
      'export {}',
      "declare module 'vue' {",
      '  export interface GlobalComponents {',
      ...components,
      '  }',
      '}',
    ]
    writeFileSync(filename, content.join('\n'), 'utf-8')
  }

  return {
    name: 'uniapp-easycom',
    configResolved(config) {
      const root = config.root
      resolvedOptions.root = root

      const pagesJsonPath = join(root, 'src/pages.json')
      const pagesJson = requireJson(pagesJsonPath)

      const customEasycom = pagesJson.easycom?.custom ?? {}
      const easycom: EasycomObject[] = []

      for (const key in customEasycom) {
        if (Object.prototype.hasOwnProperty.call(customEasycom, key)) {
          const pattern = customEasycom[key]

          if (pattern.startsWith('@/')) {
            easycom.push({ name: key, pattern: pattern.replace('@/', 'src/') })
          } else if (pattern.startsWith('./')) {
            easycom.push({ name: key, pattern: pattern.replace('./', 'src/') })
          } else if (pattern.startsWith('../')) {
            easycom.push({ name: key, pattern: pattern.replace('../', '') })
          } else {
            easycom.push({ name: key, pattern: `node_modules/${pattern}` })
          }
        }
      }

      const autoScan = pagesJson.easycom?.autoscan ?? true
      if (autoScan) {
        easycom.push({
          name: '^(.*)$',
          pattern: 'src/uni_modules/$0/components/$1/$1.vue',
        })
        easycom.push({
          name: '^(.*)$',
          pattern: 'src/components/$1/$1.vue',
        })
      }

      resolvedOptions.easycom = easycom
    },
    async buildStart() {
      const { root, easycom } = resolvedOptions

      for (const { name, pattern } of easycom) {
        // 将占位符转化为glob通配符，用于快速查找文件
        const globPattern = pattern.replace(/\$\d+/g, '*')
        const files = globSync(globPattern, {
          cwd: root,
        })

        // 将占位符转化为正则表达式，用于提取匹配项
        // $0作为通用占位符，用于匹配任意字符
        const regexp = new RegExp(
          pattern.replace('$0', '.*').replace(/\$\d+/g, '(.*)'),
        )
        for (const filename of files) {
          const matches = regexp.exec(filename)
          if (matches) {
            const [importUrl, ...matchNames] = matches

            let replaceIndex = 0
            let componentName = name
            componentName = componentName.replace(/(\(.*?\))/g, () => {
              return matchNames[replaceIndex++]
            })
            componentName = componentName.replace(/^\^/g, '')
            componentName = componentName.replace(/\$$/g, '')

            // 使用匹配模式生成组件路径，用于校验组件是否满足匹配模式
            const componentUrl = pattern.replace(/\$\d+/g, (m) => {
              // 提取匹配位置
              const [, indexStr] = /\$(\d+)/.exec(m) ?? ['', '1']
              const index = Number.parseInt(indexStr) - 1
              return index === -1 ? '.*' : matchNames[index]
            })

            const componentRegexp = new RegExp(componentUrl)
            if (componentRegexp.test(importUrl)) {
              easycomMap.set(componentName, importUrl)
            }
          }
        }
      }

      generateDts()
    },
  }
}

export default pluginEasycom
